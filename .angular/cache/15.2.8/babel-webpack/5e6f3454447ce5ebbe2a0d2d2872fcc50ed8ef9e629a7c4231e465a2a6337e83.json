{"ast":null,"code":"import { User } from 'src/data/user';\nimport * as i0 from \"@angular/core\";\nexport class UserserviceService {\n  constructor() {\n    this.users = [];\n    this.users = [new User(\"sahil\", \"Sahil Jain\", \"sahil@gmail.com\", 7043386392, \"sahil\")];\n  }\n  getUData() {\n    return this.users;\n  }\n  addUser(newuser) {\n    if (newuser != undefined) {\n      this.users.push(newuser);\n      return true;\n    }\n    return false;\n  }\n  getUser(usser) {\n    let usr = this.users.find(each => each.username == usser);\n    return usr;\n  }\n}\nUserserviceService.ɵfac = function UserserviceService_Factory(t) {\n  return new (t || UserserviceService)();\n};\nUserserviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserserviceService,\n  factory: UserserviceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,eAAe;;AAIpC,OAAM,MAAOC,kBAAkB;EAG7BC;IAFQ,UAAK,GAAS,EAAE;IAGtB,IAAI,CAACC,KAAK,GAAE,CACV,IAAIH,IAAI,CAAE,OAAO,EAAC,YAAY,EAAC,iBAAiB,EAAC,UAAU,EAAC,OAAO,CAAC,CACrE;EACH;EACAI,QAAQ;IACN,OAAO,IAAI,CAACD,KAAK;EACnB;EAEAE,OAAO,CAACC,OAAY;IAClB,IAAGA,OAAO,IAAIC,SAAS,EAAC;MACtB,IAAI,CAACJ,KAAK,CAACK,IAAI,CAACF,OAAO,CAAC;MACxB,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEAG,OAAO,CAACC,KAAY;IAClB,IAAIC,GAAG,GAAG,IAAI,CAACR,KAAK,CAACS,IAAI,CAACC,IAAI,IAAGA,IAAI,CAACC,QAAQ,IAAEJ,KAAK,CAAC;IACtD,OAAOC,GAAG;EACZ;;AAvBWV,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAc,SAAlBd,kBAAkB;EAAAe,YAFjB;AAAM","names":["User","UserserviceService","constructor","users","getUData","addUser","newuser","undefined","push","getUser","usser","usr","find","each","username","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\158590\\Downloads\\E-Marble_Inquiry\\src\\app\\Services\\userservices.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from 'src/data/user';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserserviceService {\n  private users: User[]=[];\n\n  constructor() { \n    this.users =[\n      new User (\"sahil\",\"Sahil Jain\",\"sahil@gmail.com\",7043386392,\"sahil\"),\n    ];\n  }\n  getUData():User[]{\n    return this.users;\n  }\n\n  addUser(newuser:User):boolean{\n    if(newuser != undefined){\n      this.users.push(newuser);\n      return true;\n    }\n    return false;\n  }\n\n  getUser(usser:string):User|undefined{\n    let usr = this.users.find(each=> each.username==usser);\n    return usr;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}