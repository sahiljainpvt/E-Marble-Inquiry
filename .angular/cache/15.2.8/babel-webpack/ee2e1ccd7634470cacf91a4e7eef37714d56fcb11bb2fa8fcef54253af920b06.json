{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Services/userservices.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction LoginComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" Username is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" Password is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"div\", 19);\n    i0.ɵɵtext(2, \" Successfully logged in! \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LoginComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"div\", 20);\n    i0.ɵɵtext(2, \" Invalid username or password. Please try again. \");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class LoginComponent {\n  constructor(userservices, UserserviceService, router) {\n    this.userservices = userservices;\n    this.UserserviceService = UserserviceService;\n    this.router = router;\n    this.loguser = [];\n    this.data = [];\n    this.showSuccessMessage = false;\n    this.showErrorMessage = false;\n    this.loginform = new FormGroup({\n      username: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required)\n    });\n    this.UserserviceService.updateshowstatus(false);\n    this.data = this.UserserviceService.getUData();\n  }\n  Loginuser() {\n    if (this.loginform.invalid) {\n      return;\n    }\n    const username = this.loginform.get('username')?.value;\n    const password = this.loginform.get('password')?.value;\n    const user = this.data.find(u => u.username === username && u.password === password);\n    if (user) {\n      this.showSuccessMessage = true;\n      this.showErrorMessage = false;\n      // Perform any necessary login logic here\n      if (user.Id !== undefined && user.Isadmin !== undefined) this.userservices.updatelofingstatus(true, user.Id, user.Isadmin);\n      this.router.navigate(['/']);\n    } else {\n      this.showSuccessMessage = false;\n      this.showErrorMessage = true;\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.UserserviceService), i0.ɵɵdirectiveInject(i1.UserserviceService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 29,\n  vars: 6,\n  consts: [[\"rel\", \"stylesheet\", \"href\", \"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.1/css/bootstrap.min.css\"], [1, \"container\", \"d-flex\", \"justify-content-center\", \"align-items-center\", \"mt-5\"], [1, \"col-md-6\", \"login-container\"], [1, \"login-title\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"username\"], [\"type\", \"email\", \"formControlName\", \"username\", \"name\", \"username\", \"placeholder\", \"Enter your username\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"form-group\", \"mt-3\"], [\"for\", \"password\"], [\"type\", \"password\", \"formControlName\", \"password\", \"name\", \"password\", \"placeholder\", \"Enter your password\", 1, \"form-control\"], [1, \"d-grid\"], [\"type\", \"submit\", 1, \"btn\", \"btn-login\", \"mt-4\"], [1, \"d-block\"], [3, \"routerLink\"], [\"class\", \"mt-3\", 4, \"ngIf\"], [1, \"text-danger\"], [1, \"mt-3\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"html\")(1, \"head\")(2, \"title\");\n      i0.ɵɵtext(3, \"Login Form\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"link\", 0);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"div\", 2)(7, \"h1\", 3);\n      i0.ɵɵtext(8, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"form\", 4);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_9_listener() {\n        return ctx.Loginuser();\n      });\n      i0.ɵɵelementStart(10, \"div\", 5)(11, \"label\", 6);\n      i0.ɵɵtext(12, \"Username:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 7);\n      i0.ɵɵtemplate(14, LoginComponent_div_14_Template, 2, 0, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 9)(16, \"label\", 10);\n      i0.ɵɵtext(17, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 11);\n      i0.ɵɵtemplate(19, LoginComponent_div_19_Template, 2, 0, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 12)(21, \"button\", 13);\n      i0.ɵɵtext(22, \"Login\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"div\", 14);\n      i0.ɵɵtext(24, \" Dont have a account > \");\n      i0.ɵɵelementStart(25, \"a\", 15);\n      i0.ɵɵtext(26, \"Sign Up\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(27, LoginComponent_div_27_Template, 3, 0, \"div\", 16);\n      i0.ɵɵtemplate(28, LoginComponent_div_28_Template, 3, 0, \"div\", 16);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginform);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginform.controls[\"username\"].invalid && ctx.loginform.controls[\"username\"].touched);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginform.controls[\"password\"].invalid && ctx.loginform.controls[\"password\"].touched);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"routerLink\", \"/Register\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showSuccessMessage);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showErrorMessage);\n    }\n  },\n  dependencies: [i3.NgIf, i2.RouterLink, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\", \"body[_ngcontent-%COMP%] {\\n      background-color: #f8f9fa;\\n    }\\n    \\n    .login-container[_ngcontent-%COMP%] {\\n      max-width: 400px;\\n      margin: 0 auto;\\n      margin-top: 100px;\\n      background-color: #fff;\\n      padding: 30px;\\n      border-radius: 10px;\\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\\n    }\\n    \\n    .login-title[_ngcontent-%COMP%] {\\n      font-size: 24px;\\n      font-weight: bold;\\n      text-align: center;\\n      color: #333;\\n      margin-bottom: 30px;\\n    }\\n    \\n    .form-group[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n      color: #333;\\n      font-weight: bold;\\n    }\\n    \\n    .form-control[_ngcontent-%COMP%] {\\n      border: none;\\n      border-radius: 5px;\\n      background-color: #f5f5f5;\\n      padding: 12px;\\n      color: #333;\\n    }\\n    \\n    .form-control[_ngcontent-%COMP%]:focus {\\n      outline: none;\\n      box-shadow: none;\\n      background-color: #ebebeb;\\n    }\\n    \\n    .btn-login[_ngcontent-%COMP%] {\\n      background-color: #17a2b8;\\n      color: #fff;\\n      border-radius: 5px;\\n      padding: 12px;\\n      font-weight: bold;\\n      text-transform: uppercase;\\n      letter-spacing: 1px;\\n      width: 100%;\\n      transition: background-color 0.3s;\\n    }\\n    \\n    .btn-login[_ngcontent-%COMP%]:hover {\\n      background-color: #138496;\\n    }\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;;ICyE3DC,+BAAkH;IAChHA,sCACF;IAAAA,iBAAM;;;;;IAMNA,+BAAkH;IAChHA,sCACF;IAAAA,iBAAM;;;;;IAURA,+BAA6C;IAEzCA,yCACF;IAAAA,iBAAM;;;;;IAGRA,+BAA2C;IAEvCA,iEACF;IAAAA,iBAAM;;;AD5Fd,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,YAAgC,EAAUC,kBAAsC,EAASC,MAAc;IAAvG,iBAAY,GAAZF,YAAY;IAA8B,uBAAkB,GAAlBC,kBAAkB;IAA6B,WAAM,GAANC,MAAM;IALnH,YAAO,GAAW,EAAE;IACpB,SAAI,GAAW,EAAE;IACjB,uBAAkB,GAAY,KAAK;IACnC,qBAAgB,GAAY,KAAK;IAOjC,cAAS,GAAG,IAAIP,SAAS,CAAC;MACxBQ,QAAQ,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACQ,QAAQ,CAAC;MAClDC,QAAQ,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACQ,QAAQ;KAClD,CAAC;IAPA,IAAI,CAACH,kBAAkB,CAACK,gBAAgB,CAAC,KAAK,CAAC;IAC/C,IAAI,CAACC,IAAI,GAAG,IAAI,CAACN,kBAAkB,CAACO,QAAQ,EAAE;EAChD;EAOAC,SAAS;IACP,IAAI,IAAI,CAACC,SAAS,CAACC,OAAO,EAAE;MAC1B;;IAGF,MAAMR,QAAQ,GAAG,IAAI,CAACO,SAAS,CAACE,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;IACtD,MAAMR,QAAQ,GAAG,IAAI,CAACK,SAAS,CAACE,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;IACtD,MAAMC,IAAI,GAAG,IAAI,CAACP,IAAI,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACb,QAAQ,KAAKA,QAAQ,IAAIa,CAAC,CAACX,QAAQ,KAAKA,QAAQ,CAAC;IAEpF,IAAIS,IAAI,EAAE;MACR,IAAI,CAACG,kBAAkB,GAAG,IAAI;MAC9B,IAAI,CAACC,gBAAgB,GAAG,KAAK;MAE7B;MACA,IAAGJ,IAAI,CAACK,EAAE,KAAGC,SAAS,IAAIN,IAAI,CAACO,OAAO,KAAGD,SAAS,EAClD,IAAI,CAACpB,YAAY,CAACsB,kBAAkB,CAAC,IAAI,EAAER,IAAI,CAACK,EAAE,EAAEL,IAAI,CAACO,OAAO,CAAC;MACjE,IAAI,CAACnB,MAAM,CAACqB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;KAC5B,MAAM;MACL,IAAI,CAACN,kBAAkB,GAAG,KAAK;MAC/B,IAAI,CAACC,gBAAgB,GAAG,IAAI;;EAEhC;;AArCWpB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAA0B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV3B/B,4BAAM;MAEGA,0BAAU;MAAAA,iBAAQ;MAEzBA,0BAA2G;MA4D7GA,iBAAO;MACPA,8BAA6E;MAGjDA,qBAAK;MAAAA,iBAAK;MAClCA,+BAAuD;MAAzBA;QAAA,OAAYgC,eAAW;MAAA,EAAC;MACpDhC,+BAAwB;MACAA,0BAAS;MAAAA,iBAAQ;MACvCA,4BAAsH;MACtHA,iEAEM;MACRA,iBAAM;MAENA,+BAA6B;MACLA,0BAAS;MAAAA,iBAAQ;MACvCA,6BAAyH;MACzHA,iEAEM;MACRA,iBAAM;MAENA,gCAAoB;MAC+BA,sBAAK;MAAAA,iBAAS;MAEjEA,gCAAqB;MACnBA,wCAAsB;MAAAA,8BAA8B;MAAAA,wBAAO;MAAAA,iBAAI;MAGjEA,kEAIM;MAENA,kEAIM;MACRA,iBAAO;;;MAnCDA,eAAuB;MAAvBA,yCAAuB;MAInBA,eAAsF;MAAtFA,+GAAsF;MAQtFA,eAAsF;MAAtFA,+GAAsF;MASnEA,eAA0B;MAA1BA,wCAA0B;MAGlCA,eAAwB;MAAxBA,6CAAwB;MAMxBA,eAAsB;MAAtBA,2CAAsB","names":["FormControl","FormGroup","Validators","i0","LoginComponent","constructor","userservices","UserserviceService","router","username","required","password","updateshowstatus","data","getUData","Loginuser","loginform","invalid","get","value","user","find","u","showSuccessMessage","showErrorMessage","Id","undefined","Isadmin","updatelofingstatus","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\158590\\OneDrive - Arrow Electronics, Inc\\Desktop\\E-Marble_Inquiry\\src\\app\\authentication\\login\\login.component.ts","C:\\Users\\158590\\OneDrive - Arrow Electronics, Inc\\Desktop\\E-Marble_Inquiry\\src\\app\\authentication\\login\\login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { User } from 'src/app/data/user';\nimport { UserserviceService } from 'src/app/Services/userservices.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loguser: User[] = [];\n  data: User[] = [];\n  showSuccessMessage: boolean = false;\n  showErrorMessage: boolean = false;\n\n  constructor(private userservices: UserserviceService, private UserserviceService: UserserviceService, public router: Router) {\n    this.UserserviceService.updateshowstatus(false);\n    this.data = this.UserserviceService.getUData();\n  }\n\n  loginform = new FormGroup({\n    username: new FormControl('', Validators.required),\n    password: new FormControl('', Validators.required)\n  });\n\n  Loginuser() {\n    if (this.loginform.invalid) {\n      return;\n    }\n\n    const username = this.loginform.get('username')?.value;\n    const password = this.loginform.get('password')?.value;\n    const user = this.data.find(u => u.username === username && u.password === password);\n\n    if (user) {\n      this.showSuccessMessage = true;\n      this.showErrorMessage = false;\n\n      // Perform any necessary login logic here\n      if(user.Id!==undefined && user.Isadmin!==undefined)\n      this.userservices.updatelofingstatus(true, user.Id, user.Isadmin);\n      this.router.navigate(['/']);\n    } else {\n      this.showSuccessMessage = false;\n      this.showErrorMessage = true;\n    }\n  }\n}\n","<!DOCTYPE html>\n<html>\n<head>\n  <title>Login Form</title>\n  <!-- Bootstrap CSS -->\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.1/css/bootstrap.min.css\">\n  <style>\n    /* Custom styles */\n    body {\n      background-color: #f8f9fa;\n    }\n    \n    .login-container {\n      max-width: 400px;\n      margin: 0 auto;\n      margin-top: 100px;\n      background-color: #fff;\n      padding: 30px;\n      border-radius: 10px;\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    }\n    \n    .login-title {\n      font-size: 24px;\n      font-weight: bold;\n      text-align: center;\n      color: #333;\n      margin-bottom: 30px;\n    }\n    \n    .form-group label {\n      color: #333;\n      font-weight: bold;\n    }\n    \n    .form-control {\n      border: none;\n      border-radius: 5px;\n      background-color: #f5f5f5;\n      padding: 12px;\n      color: #333;\n    }\n    \n    .form-control:focus {\n      outline: none;\n      box-shadow: none;\n      background-color: #ebebeb;\n    }\n    \n    .btn-login {\n      background-color: #17a2b8;\n      color: #fff;\n      border-radius: 5px;\n      padding: 12px;\n      font-weight: bold;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n      width: 100%;\n      transition: background-color 0.3s;\n    }\n    \n    .btn-login:hover {\n      background-color: #138496;\n    }\n  </style>\n</head>\n<div class=\"container d-flex justify-content-center align-items-center mt-5\">\n  <!-- Center the form vertically and horizontally -->\n  <div class=\"col-md-6 login-container\">\n    <h1 class=\"login-title\">Login</h1>\n    <form [formGroup]=\"loginform\" (ngSubmit)=\"Loginuser()\">\n      <div class=\"form-group\">\n        <label for=\"username\">Username:</label>\n        <input type=\"email\" class=\"form-control\" formControlName=\"username\" name=\"username\" placeholder=\"Enter your username\">\n        <div *ngIf=\"loginform.controls['username'].invalid && loginform.controls['username'].touched\" class=\"text-danger\">\n          Username is required\n        </div>\n      </div>\n\n      <div class=\"form-group mt-3\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" class=\"form-control\" formControlName=\"password\" name=\"password\" placeholder=\"Enter your password\">\n        <div *ngIf=\"loginform.controls['password'].invalid && loginform.controls['password'].touched\" class=\"text-danger\">\n          Password is required\n        </div>\n      </div>\n\n      <div class=\"d-grid\">\n        <button type=\"submit\" class=\"btn btn-login mt-4\">Login</button> <!-- Center the button -->\n      </div>\n      <div class=\"d-block\">\n        Dont have a account > <a [routerLink]=\"'/Register'\">Sign Up</a>\n      </div>\n\n      <div class=\"mt-3\" *ngIf=\"showSuccessMessage\">\n        <div class=\"alert alert-success\" role=\"alert\">\n          Successfully logged in!\n        </div>\n      </div>\n\n      <div class=\"mt-3\" *ngIf=\"showErrorMessage\">\n        <div class=\"alert alert-danger\" role=\"alert\">\n          Invalid username or password. Please try again.\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}