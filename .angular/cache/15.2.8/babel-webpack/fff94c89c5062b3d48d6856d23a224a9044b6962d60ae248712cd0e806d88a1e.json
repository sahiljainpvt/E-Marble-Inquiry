{"ast":null,"code":"import { User } from '../data/user';\nimport { Cart } from '../data/cart';\nimport * as i0 from \"@angular/core\";\nexport class UserserviceService {\n  constructor() {\n    this.users = [];\n    this.cart = [];\n    this.show = true;\n    this.userlogin = false;\n    this.isadmin = false;\n    this.loginuserID = 0;\n    this.users = [new User(1, 'sahil Jain', 'sahil@gmail.com', '1234567898', 'sahil', false), new User(2, 'Rutvik Chavda', 'rutvik@gmail.com', '123456789', 'rutvik', false), new User(3, 'Ayush Modi', 'ayush@gmail.com', '123456789', 'ayush', false), new User(4, 'Admin', 'admin@gmail.com', '123456789', 'admin', true)];\n    this.cart = [new Cart(1, 1, 1), new Cart(2, 2, 2), new Cart(3, 3, 3), new Cart(4, 1, 3)];\n  }\n  getUData() {\n    return this.users;\n  }\n  removecart(uid) {\n    this.cart = this.cart.filter(c => c.UserId != uid);\n    console.log(this.cart, \"from cart\");\n  }\n  removecarts(uid, proid) {\n    console.log(uid, proid);\n    const num = this.cart.findIndex(c => c.ProductiD !== proid && c.UserId !== uid);\n    console.log(num);\n    this.cart.splice(num - 1, 1);\n    console.log(this.cart);\n  }\n  getcartnumber() {\n    const number = this.cart.filter(c => c.UserId === this.loginuserID);\n    return \"(\" + number.length + \")\";\n  }\n  getcart() {\n    return this.cart;\n  }\n  addcart(cart) {\n    cart.Id = this.cart.length;\n    this.cart.push(cart);\n    console.log(this.cart);\n    return true;\n  }\n  addUser(newuser) {\n    if (newuser != undefined) {\n      this.users.push(newuser);\n      return true;\n    }\n    return false;\n  }\n  getUser() {\n    let usr = this.users.find(each => each.Id == this.loginuserID);\n    return usr;\n  }\n  getshowstatus() {\n    return this.show;\n  }\n  updateshowstatus(value) {\n    this.show = value;\n  }\n  updatelofingstatus(value, id, isadmin) {\n    this.userlogin = value;\n    this.loginuserID = id;\n    if (isadmin !== undefined) this.isadmin = isadmin;\n    return this.userlogin;\n  }\n  getuserloginstatus() {\n    return this.userlogin;\n  }\n  getstausofisadmin() {\n    return this.isadmin;\n  }\n  getuserloginid() {\n    return this.loginuserID;\n  }\n}\nUserserviceService.ɵfac = function UserserviceService_Factory(t) {\n  return new (t || UserserviceService)();\n};\nUserserviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserserviceService,\n  factory: UserserviceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["User","Cart","UserserviceService","constructor","users","cart","getUData","removecart","uid","filter","c","UserId","console","log","removecarts","proid","num","findIndex","ProductiD","splice","getcartnumber","number","loginuserID","length","getcart","addcart","Id","push","addUser","newuser","undefined","getUser","usr","find","each","getshowstatus","show","updateshowstatus","value","updatelofingstatus","id","isadmin","userlogin","getuserloginstatus","getstausofisadmin","getuserloginid","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\158590\\Downloads\\E-Marble_Inquiry\\src\\app\\Services\\userservices.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../data/user';\nimport { Cart } from '../data/cart';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserserviceService {\n  private users: User[] = [];\n  private cart: Cart[]=[];\n  public show: boolean = true;\n  public userlogin: boolean = false;\n  public isadmin: boolean = false;\n  public loginuserID:number=0;\n\n  constructor() { \n    this.users = [\n      new User(1,'sahil Jain', 'sahil@gmail.com', '1234567898', 'sahil',false),\n      new User(2,'Rutvik Chavda', 'rutvik@gmail.com','123456789', 'rutvik',false),\n      new User(3,'Ayush Modi', 'ayush@gmail.com', '123456789', 'ayush',false),\n      new User(4,'Admin', 'admin@gmail.com', '123456789', 'admin',true)\n    ];\n    this.cart=[\n      new Cart(1,1,1),\n      new Cart(2,2,2),\n      new Cart(3,3,3),\n      new Cart(4,1,3)\n    ]\n    \n  }\n\n  getUData(): User[] {\n    return this.users;\n  }\n  removecart(uid:number):void{\n    this.cart=this.cart.filter(c => c.UserId!=uid)\n    console.log(this.cart,\"from cart\");\n  }\n\n  removecarts(uid:number,proid:number){\n    console.log(uid,proid);\n\n    const num=this.cart.findIndex(c =>  (c.ProductiD!==proid && c.UserId!==uid) );\n    console.log(num);\n    this.cart.splice(num-1,1);\n    console.log(this.cart);\n  }\n  getcartnumber(): string {\n      const number = this.cart.filter(c => c.UserId === this.loginuserID);\n   \n      return \"(\"+number.length+\")\";\n      \n  }\n  getcart(): Cart[] {\n    return this.cart;\n  }\n  addcart(cart:Cart): boolean {\n    cart.Id=this.cart.length;\n    this.cart.push(cart);\n    console.log(this.cart);\n    return true\n  }\n  addUser(newuser: User): boolean {\n    if (newuser != undefined) {\n      this.users.push(newuser);\n      return true;\n    }\n    return false;\n  }\n\n  getUser(): User | undefined {\n    let usr = this.users.find(each => each.Id ==this.loginuserID);\n    return usr;\n  }\n\n  getshowstatus(): boolean {\n    return this.show;\n  }\n\n  updateshowstatus(value: boolean) {\n    this.show = value;\n  }\n\n  updatelofingstatus(value: boolean,id:number,isadmin:boolean): boolean {\n    this.userlogin = value;\n    this.loginuserID=id;\n    if(isadmin!==undefined)\n    this.isadmin = isadmin;\n  \n    return this.userlogin;\n  }\n\n  getuserloginstatus(): boolean {\n    return this.userlogin;\n  }\n  getstausofisadmin():boolean {\n    return this.isadmin;\n  }\n  getuserloginid(): number {\n    return this.loginuserID;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}